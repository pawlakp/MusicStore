@model MusicStore.Domain.Entities.ShippingDetails




    @*<div class="form-horizontal">
        <h4>Wysyłka dla</h4>
        <hr />
        <div class="form-group">
            @Html.DisplayNameFor(model => model.Name)
            <div class="col-md-10">
                @Html.DisplayFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        @foreach (var p in ViewData.ModelMetadata.Properties)
        {
            if (p.PropertyName != "Name" && p.PropertyName != "GiftWrap")
            {
                <div class="form-group">
                    @Html.DisplayName(p.DisplayName ?? p.PropertyName)
                    <div class="col-md-10">
                        @Html.Display(p.PropertyName, null, null, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
            }
        }

        <h3>Opcje</h3>
        <div class="form-group">
            @Html.DisplayNameFor(model => model.GiftWrap)
            <div class="col-md-10">
                <div class="checkbox">
                    <label>
                        @Html.DisplayFor(model => model.GiftWrap)
                    </label>
                </div>
            </div>
        </div>

        @Html.Hidden("Id", @Session["Id"])
        <div class="text-center">
            <input type="submit" value="Zakończ zamówienie" class="btn btn-primary" />
        </div>
    </div>*@


    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Wysyłka dla</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        <label>Nazwisko:</label>
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    @foreach (var p in ViewData.ModelMetadata.Properties)
    {
        if (p.PropertyName != "Name" && p.PropertyName != "GiftWrap")
        {
            <div class="form-group">
                <label>@(p.DisplayName??p.PropertyName)</label>
                <div class="col-md-10">
                    @Html.Editor(p.PropertyName, null, null, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessage(p.PropertyName, new { @class = "text-danger" })
                </div>
            </div>
        }
    }

    <h3>Opcje</h3>
    <div class="form-group">
        <div class="col-md-10">
            <div class="checkbox">
                <label>
                    @Html.EditorFor(model => model.GiftWrap)
                    @Html.ValidationMessageFor(model => model.GiftWrap, "", new { @class = "text-danger" })
                    Zapakuj jako prezent
                </label>
            </div>
        </div>
    </div>
</div>



